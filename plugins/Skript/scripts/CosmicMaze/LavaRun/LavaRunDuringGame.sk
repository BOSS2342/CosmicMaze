function lavaRunQueue(p: player, dif: object):
    if {lavaRun::%{_dif}%::*} contains {_p}:
        send "&cYou're already in queue!" to {_p}
        stop
    if {inGame::%{_p}%} is true:
        send "&cYou're already in a game." to {_p}
        stop
    if {lavaRun::%{_dif}%} is false:
        send "&cThe game is currently running" to {_p}
        stop
    
    #If the game Is running
    add {_p} to {lavaRun::%{_dif}%::*}
    send "&aConnecting to a match..." to {_p}
    wait 1.3 seconds
    send title "&6Lava Run" with subtitle "&7In Beta" to {_p}
    send "&bYou have joined the queue for &6Lava Run | &a" to {_p}
    teleport {_p} to {waitingLavaRun}
    lavaRunLobbyReady({_dif})

function lavaRunLobbyReady(dif: object):
    if size of {lavaRun::%{_dif}%::*} is greater than 2:
        stop
    else if size of {lavaRun::{_diff}::*} is greater than 1:
        loop {lavaRun::%{_dif}%::*}:
            set {inGame::%loop-value%} to true
        initiateLavaRun({_dif})
    else:
        stop

function createLavaRunWorld(dif: object):
    execute console command "/mv clone LavaRunMaster LavaRun%{_dif}%"
    wait 10 ticks
    execute console command "/mvconfirm"
    wait 20 ticks
    execute console command "/mv import LavaRun%{_dif}% normal -g VoidGen"
    execute console command "/mv load LavaRunMaster"

function lavaRunIsStarting(dif: object):
    set {_gameStartPos} to location(45.5, 77, -46.5, world("LavaRun%{_dif}%"))


    #30 - 10 Seconds
    send "&eGame beginning in 30 seconds" to {lavaRun::%{_dif}%::*}
    wait 15 seconds
    send "&eGame beginning in 15 seconds" to {lavaRun::%{_dif}%::*}
    wait 5 seconds
    send "&eGame beginning in 10 seconds" to {lavaRun::%{_dif}%::*}
    wait 5 seconds

    #5 - 1 Seconds
    send title "&eGame Starting" with subtitle "&45" to {lavaRun::%{_dif}%::*}
    play sound "note.bass" with volume 0.5 to {lavaRun::%{_dif}%::*}
    wait 1 seconds
    send title "&eGame Starting" with subtitle "&64" to {lavaRun::%{_dif}%::*}
    play sound "note.bass" with volume 0.5 to {lavaRun::%{_dif}%::*}
    wait 1 seconds
    send title "&eGame Starting" with subtitle "&e3" to {lavaRun::%{_dif}%::*}
    play sound "note.bass" with volume 0.5 to {lavaRun::%{_dif}%::*}
    wait 1 seconds
    send title "&eGame Starting" with subtitle "&22" to {lavaRun::%{_dif}%::*}
    play sound "note.bass" with volume 0.5 to {lavaRun::%{_dif}%::*}
    wait 1 seconds
    send title "&eGame Starting" with subtitle "&11" to {lavaRun::%{_dif}%::*}

    #Game Commence
    teleport {lavaRun::%{_dif}%::*} to {_gameStartPos}
    play sound "random.levelup" with volume 0.5 to {lavaRun::%{_dif}%::*}
    send "&cBest run from the lava!" to {lavaRun::%{_dif}%::*}
    
function initiateLavaRun(dif: object):
    if world "LavaRun%{_dif}%" does not exist:
        createLavaRunWorld({_dif})
    
    lavaRunIsStarting({_dif})

    lavaRunGameManager({_dif})

function fillLava(loc1: location, loc2: location):
    loop blocks between {_loc1} and {_loc2}:
        if loop-block is air:
            set loop-block to lava

function getDifficultyWaitTime(dif: object, stage: number) :: timespan:
    if {_dif} is easy:
        if {_stage} is 1:
            return 3 seconds
        else if {_stage} is 2:
            return 2 seconds
        else if {_stage} is 3:
            return 1 seconds
        else:
            return 0.5 seconds
    if {_dif} is medium:
        if {_stage} is 1:
            return 2 seconds
        else if {_stage} is 2:
            return 1 seconds
        else if {_stage} is 3:
            return 0.5 seconds
        else:
            return 0.5 seconds
    if {_dif} is hard:
        if {_stage} is 1:
            return 1 seconds
        else if {_stage} is 2:
            return 0.5 seconds
        else if {_stage} is 3:
            return 0.25 seconds
        else:
            return 0.25 seconds

function lavaRunStageChange(dif: object, stage: number):
    send "&cLava has progressed to level &a{_stage}" to {lavaRun::%{_dif}%::*}
    loop {lavaRun::%{_dif}%::*}:
        if {LavaRun::stage::%loop-value%} is less than {_stage}:
            loseLavaRun(loop-value)

function lavaRunGameManager({_dif}: object):
    set {lavaRun::%{_dif}%} to "Running"
    set {_world} to "LavaRun%{_dif}%"

    set {_stage} to 1
    set {_x} to 47.5
    set {_y} to 81
    set {_z} to -58.5
    
    set {_loc1} to location at {_x}, {_y}, {_z} - 4 in world "%{_world}%"
    set {_loc2} to location at {_x}, {_y}, {_z} in world "%{_world}%"

    set {_waitTime} to getDifficultyWaitTime({_dif}, {_stage})
    set {_iterations} to 1
    loop 490 times:
        if {stopGame::lavaRun%{_dif}%} is true:
            set {stopGame::lavaRun%{_dif}%} to false
            send title "Game Stopped By Admin" to {lavaRun::%{_dif}%::*}
            wait 1 seconds
            stop
        if {_stage} is 5:
            stop
        if {_iterations} > 490:
            send "Something went wrong: Ending Game" to {lavaRun::%{_dif}%::*}
            wait 1 seconds
            play sound "entity_generic_explode" with volume 1 to {lavaRun::%{_dif}%::*}
            stop

        fillLava({_loc1}, {_loc2})

        if {_stage} isn't (floor({_iterations}/122) + 1):
            set {_stage} to (floor({_iterations}/122) + 1)
            lavaRunStageChange({_dif}, {_stage})
            set {_waitTime} to getDifficultyWaitTime({_dif}, {_stage})
        add (1 - (8 * {_stage})) to {_x}

        set {_loc1} to location at {_x}, {_y}, {_z} - 4 in world "%{_world}%"
        set {_loc2} to location at {_x}, {_y}, {_z} in world "%{_world}%"

        add 1 to {_iterations}
    
    endLavaRun({_dif})
    
function endLavaRun(dif: object):
    set {lavaRun::%{_dif}%} to false
    send title "&aGame Over" to {lavaRun::%{_dif}%::*}
    teleport {lavaRun::%{_dif}%::*} to {lobby::main}
    send "&bGame has ended!" to {lavaRun::%{_dif}%::*}
    send "&7--------------" to {lavaRun::%{_dif}%::*}
    execute console command "mv delete LavaRun%{_dif}%"
    wait 1 ticks
    execute console command "mv confirm"

    loop {lavaRun::%{_dif}%::*}:
        set {LavaRun::stage::%loop-value%} to 0
        send "&cOver All LavaRun Stats:" to {lavaRun::%{_dif}%::*}
        send "&eYou've staged up: &7%{lavaRunStats::%loop-value%::stageUps}%" to {lavaRun::%{_dif}%::*}
        send "&eYou have: %{LavaRun::wins::%loop-value%}% wins" to {lavaRun::%{_dif}%::*}
        remove loop-value from {lavaRun::%{_dif}%::*}
        set {inGame::%loop-value%} to false

command /endLavaRun <text>:
    permission: op
    trigger:
        if arg-1 is "easy":
            set {_dif} to easy
        else if arg-1 is "medium":
            set {_dif} to medium
        else if arg-1 is "hard":
            set {_dif} to hard
        send "Ending Lava Run Game, with the difficulty of %arg-1%" to player
        set {stopGame::lavaRun%{_dif}%} to true
 